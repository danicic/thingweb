/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2015 Siemens AG and the thingweb community
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

apply plugin: 'application'

mainClassName = "de.thingweb.launcher.Launcher"
def guiClassName = "de.thingweb.gui.ThingsClient"
sourceCompatibility = 1.8
version = '1.1'

test {
    systemProperties 'property': 'value'
}

uploadArchives {
    repositories {
        flatDir {
            dirs 'repos'
        }
    }
}

task runServer(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath

    main = mainClassName

    workingDir = "./src/dist"
}


task runGui(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath

    main = guiClassName

    workingDir = "./src/dist"
}

def createScript(project, mainClass, name) {
    project.tasks.create(name: name, type: CreateStartScripts) {
        outputDir = new File(project.buildDir, 'scripts')
        mainClassName = mainClass
        applicationName = name
        classpath = project.tasks[JavaPlugin.JAR_TASK_NAME].outputs.files + project.configurations.runtime
    }
    project.tasks[name].dependsOn(project.jar)

    project.applicationDistribution.with {
        into("bin") {
            from(project.tasks[name])
            fileMode = 0755
        }
    }
}

createScript(project, guiClassName, 'wot-client')

allprojects {
}

subprojects {

    apply plugin: 'java'
    apply plugin: 'eclipse'

    repositories {
        mavenCentral()
    }


    dependencies {
        compile 'org.slf4j:slf4j-api:1.7.12'
        compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.+'
        testCompile group: 'junit', name: 'junit', version: '4.8'
    }

    dependencies {
        //compile group: 'commons-collections', name: 'commons-collections', version: '3.2'
        //compile 'org.json:json:20141113'

        compile files("lib/neopixel-java-1.0-SNAPSHOT.jar")
        runtime files("lib/jsonld-context.jar")
    }
}